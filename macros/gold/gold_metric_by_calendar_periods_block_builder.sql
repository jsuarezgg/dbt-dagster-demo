{#- DOCS -#}
{#- @ 2023-02-15 by Carlos D.A. Puerto Ni√±o - Analytics Engineer -#}
{#- Description: Macro to build metric aggregated sections for several time ranges in a scalable fashion -#}
{#- Usage: 
    SELECT
     {{ gold_metric_by_calendar_periods_block_builder(metric_name = 'This is my metric %',
                                            metric_type = 'percentage',      
                                            num_name = 'Numerator name',
                                            den_name = 'Denominator name',
                                            num_column='top_of_the_line_num',
                                            den_column = 'top_of_the_line_den',
                                            num_function_add_distinct=true,
                                            order_num = 4,
                                            extra_column_and_values = {'numerical_target_column':3.5, 'string_column':"'sd'"}) }} 
    FROM my_metrics_cte AS m
    LEFT JOIN (SELECT * FROM gold.dm_support_today_master_calendar ARRAYS_OVERLAP(countries,ARRAY('UTC'))) AS d ON TRUE
    --WHERE <some conditions on metrics table >
    GROUP BY 1,2,3,4,5,6 -- `1` is for the `d.today` column; `2`,`3`,`4`,`5`,`6` for the `metric`,`metric_type`,`num_name`,`den_name`, and `ordered` columns`;
     any additional columns passed as extra, must be included in this group by, `7`,`8`,etc
-#}
{#- m = metric_table_alias -#}
{#- d = calendar_table_alias -#}
{#- metric_type -> one of the following: 'number' (int or float),'money', 'percentage' -#}
{% macro gold_metric_by_calendar_periods_block_builder(
    metric_name = 'metric_name_exemplar',
    metric_type = none,            
    num_name = 'Numerator name',
    den_name = 'NA',
    num_column='numerator_exemplar',
    den_column = none,
    date_column = 'period',
    num_function = 'SUM',
    den_function = 'SUM',
    num_function_add_distinct = false,
    den_function_add_distinct = false,
    order_num = 0,
    positive_change_is_good = true,
    extra_column_and_values = {},
    m = 'm',
    d = 'd'
    ) %}
{#- Validation: Inputs -#}
{%- if metric_type is none or metric_type not in ['number','money','percentage']-%}
    {{ exceptions.raise_compiler_error("Custom error >>> gold_metric_by_calendar_periods_block_builder() >>> argument `metric_type`must be one of the following: `number`,`money`,`percentage`") }}
{%- endif -%}
{#- AUTO VARIABLES -#}
{%- if num_function_add_distinct -%}{%- set num_function_distinct = 'DISTINCT ' -%}{%- endif -%}
{%- if den_function_add_distinct -%}{%- set den_function_distinct = 'DISTINCT ' -%}{%- endif -%}
{%- set num_calculation = num_function~'('~num_function_distinct~m~'.'~num_column~')' -%}
{%- if den_column is not none -%} 
    {%- set den_calculation = den_function~'('~den_function_distinct~m~'.'~den_column~')' -%}
{%- else -%}
    {%- set den_calculation = 'FIRST_VALUE(1)' -%}
{%- endif -%}
{%- set column_types = {'num':num_calculation,'den':den_calculation}-%}
-- AUTOGENERATED CODE START
    {{d}}.today,
    '{{metric_name}}' AS metric,
    '{{metric_type}}' AS metric_type,
    '{{num_name}}' AS numerator_name,
    '{{den_name}}' AS denominator_name,
    {{positive_change_is_good}} AS positive_change_is_good,
    {{order_num}} AS ordered,
{%- for column_name,value in extra_column_and_values.items() %}
    {{value}} AS {{column_name}},
{%- endfor -%}
{#- ITERATION ON CALCULATIONS FOR BOTH NUMERATORS AND DENOMINATORS -#}
{%- for suffix, col_calculation in column_types.items() -%}
    {%- if den_column is none and suffix == 'den' %} 
    {{col_calculation}} AS yesterday_{{suffix}},
    {{col_calculation}} AS wtd_{{suffix}},
    {{col_calculation}} AS mtd_{{suffix}},
    {{col_calculation}} AS qtd_{{suffix}},
    {{col_calculation}} AS last_week_complete_{{suffix}},
    {{col_calculation}} AS last_last_week_complete_{{suffix}},
    {{col_calculation}} AS 3_weeks_ago_complete_{{suffix}},
    {{col_calculation}} AS last_month_complete_{{suffix}},
    {{col_calculation}} AS last_week_equivalent_{{suffix}},
    {{col_calculation}} AS last_last_week_equivalent_{{suffix}},
    {{col_calculation}} AS last_month_equivalent_{{suffix}}{%- if not loop.last-%},{%-endif-%}
    {%- else %}
    {{col_calculation}} FILTER (WHERE                                            {{m}}.{{date_column}} = {{d}}.yesterday)                                                              AS yesterday_{{suffix}},
    {{col_calculation}} FILTER (WHERE CASE WHEN {{d}}.dow_iso = 1 THEN NULL ELSE {{m}}.{{date_column}} BETWEEN {{d}}.current_week_start AND {{d}}.yesterday END)                       AS wtd_{{suffix}},
    {{col_calculation}} FILTER (WHERE CASE WHEN {{d}}.dom     = 1 THEN NULL ELSE {{m}}.{{date_column}} BETWEEN {{d}}.current_month_start AND {{d}}.yesterday END)                      AS mtd_{{suffix}},
    {{col_calculation}} FILTER (WHERE CASE WHEN {{d}}.doq     = 1 THEN NULL ELSE {{m}}.{{date_column}} BETWEEN {{d}}.current_quarter_start AND {{d}}.yesterday END)                    AS qtd_{{suffix}},
    {{col_calculation}} FILTER (WHERE                                            {{m}}.{{date_column}} BETWEEN {{d}}.last_week_start AND {{d}}.last_week_end)                          AS last_week_complete_{{suffix}},
    {{col_calculation}} FILTER (WHERE                                            {{m}}.{{date_column}} BETWEEN {{d}}.last_last_week_start AND {{d}}.last_last_week_end)                AS last_last_week_complete_{{suffix}},
    {{col_calculation}} FILTER (WHERE                                            {{m}}.{{date_column}} BETWEEN {{d}}.3_weeks_ago_start AND {{d}}.3_weeks_ago_end)                      AS 3_weeks_ago_complete_{{suffix}},
    {{col_calculation}} FILTER (WHERE                                            {{m}}.{{date_column}} BETWEEN {{d}}.last_month_start AND {{d}}.last_month_end)                        AS last_month_complete_{{suffix}},
    {{col_calculation}} FILTER (WHERE CASE WHEN {{d}}.dow_iso = 1 THEN NULL ELSE {{m}}.{{date_column}} BETWEEN {{d}}.last_week_start AND {{d}}.last_week_end_equivalent END)           AS last_week_equivalent_{{suffix}},
    {{col_calculation}} FILTER (WHERE CASE WHEN {{d}}.dow_iso = 1 THEN NULL ELSE {{m}}.{{date_column}} BETWEEN {{d}}.last_last_week_start AND {{d}}.last_last_week_end_equivalent END) AS last_last_week_equivalent_{{suffix}},
    {{col_calculation}} FILTER (WHERE CASE WHEN {{d}}.dom     = 1 THEN NULL ELSE {{m}}.{{date_column}} BETWEEN {{d}}.last_month_start AND {{d}}.last_month_end_equivalent END)         AS last_month_equivalent_{{suffix}}{%- if not loop.last-%},{%-endif-%}
    {%- endif -%}
{% endfor %}
/* DEBUGGING
 metric_name = {{metric_name}}, metric_type = {{metric_type}}, num_name = {{num_name}}, den_name = {{den_name}}, num_column='numerator_exemplar'{{num_column}}, den_column = {{den_column}}, date_column = {{date_column}}, num_function = {{num_function}}, den_function = {{den_function}}, num_function_add_distinct = {{num_function_add_distinct}}, den_function_add_distinct = {{den_function_add_distinct}}, order_num = {{order_num}}, positive_change_is_good = {{positive_change_is_good}}, extra_column_and_values = {{extra_column_and_values}}, m = {{m}}, d = {{d}}
 */
 -- AUTOGENERATED CODE END; USE -> GROUP BY 1,2,3,4,5,6,7
 {%- for column_name,value in extra_column_and_values.items() %},{{loop.index + 7}}{%- endfor -%}
 {%- endmacro %}
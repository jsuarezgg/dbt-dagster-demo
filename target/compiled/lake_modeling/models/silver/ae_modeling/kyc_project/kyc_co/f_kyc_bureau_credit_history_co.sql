
-- SILVER SQL

-- SECTION 1 -> CALLING BRONCE ref's
WITH
prospectbureaucredithistoryobtained_co AS ( 
    SELECT *
    FROM bronze.prospectbureaucredithistoryobtained_co
    WHERE ocurred_on_date BETWEEN (to_date('2022-01-01'- INTERVAL "10" HOUR)) AND to_date('2022-01-30') AND
        ocurred_on BETWEEN (to_timestamp('2022-01-01'- INTERVAL "10" HOUR)) AND to_timestamp('2022-01-30') 
)


--SECTION 1B -> UNION BRONCE ref's
, union_bronze AS (
    SELECT 
        application_id,client_id,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_balance,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_closedAccounts,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_creditUtilizationRatio,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_initialApprovedAmount,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_installmentAmount,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_maximumDelinquency,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_openedAccounts,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_rating,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_score,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_totalClosedAccounts,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_totalOpenedAccounts,commercial_commercialSummaryExperian_summary_balance_delinquent30Balance,commercial_commercialSummaryExperian_summary_balance_delinquent60Balance,commercial_commercialSummaryExperian_summary_balance_delinquent90Balance,commercial_commercialSummaryExperian_summary_balance_delinquentBalance,commercial_commercialSummaryExperian_summary_balance_higherBalance,commercial_commercialSummaryExperian_summary_balance_installmentAmount,commercial_commercialSummaryExperian_summary_balance_totalBalance,commercial_commercialSummaryExperian_summary_principal_claims,commercial_commercialSummaryExperian_summary_principal_closedAccounts,commercial_commercialSummaryExperian_summary_principal_closedAccountsAHOCCB,commercial_commercialSummaryExperian_summary_principal_customerSince,commercial_commercialSummaryExperian_summary_principal_disagreementsToDate,commercial_commercialSummaryExperian_summary_principal_lastSixMonthsQueries,commercial_commercialSummaryExperian_summary_principal_negativeHistoryLastTwelveMonths,commercial_commercialSummaryExperian_summary_principal_negativeOpenAccounts,commercial_commercialSummaryExperian_summary_principal_openAccounts,commercial_commercialSummaryExperian_summary_principal_openAccountsAHOCCB,commercial_incomeEstimator_averageSMLV,commercial_incomeEstimator_creditCardBalance,commercial_incomeEstimator_creditCardInitialApprovedAmount,commercial_incomeEstimator_creditCardInstallment,commercial_incomeEstimator_estimatedIncome,commercial_incomeEstimator_indebtednessCapacity,commercial_incomeEstimator_maximum,commercial_incomeEstimator_maximumSMLV,commercial_incomeEstimator_minimum,commercial_incomeEstimator_minimumSMLV,commercial_incomeEstimator_nonRevolvingTotalBalance,commercial_incomeEstimator_nonRevolvingTotalInitialApprovedAmount,commercial_incomeEstimator_nonRevolvingTotalInstallment,commercial_incomeEstimator_nonRevolvingTotalProducts,commercial_incomeEstimator_paymentCapacity,commercial_incomeEstimator_totalActiveCreditCards,commercial_incomeEstimator_totalActiveProducts,commercial_incomeEstimator_totalBalance,commercial_incomeEstimator_totalInitialApprovedAmount,commercial_incomeEstimator_totalInstallment,commercial_incomeValidator_healthEntity,commercial_incomeValidator_pensionFundName,commercial_indebtednessSummary_quarter1_date,commercial_indebtednessSummary_quarter1_numberOfEntities,commercial_indebtednessSummary_quarter1_numberOfPurchases,commercial_indebtednessSummary_quarter1_numberOfRefinanced,commercial_indebtednessSummary_quarter1_numberOfWriteOffs,commercial_indebtednessSummary_quarter2_date,commercial_indebtednessSummary_quarter2_numberOfEntities,commercial_indebtednessSummary_quarter2_numberOfPurchases,commercial_indebtednessSummary_quarter2_numberOfRefinanced,commercial_indebtednessSummary_quarter2_numberOfWriteOffs,commercial_indebtednessSummary_quarter3_date,commercial_indebtednessSummary_quarter3_numberOfEntities,commercial_indebtednessSummary_quarter3_numberOfPurchases,commercial_indebtednessSummary_quarter3_numberOfRefinanced,commercial_indebtednessSummary_quarter3_numberOfWriteOffs,commercial_provider,metadata_context_traceId,ocurred_on,event_name as last_event_name_processed,
    event_name,event_id as last_event_id_processed,
    event_id
    FROM prospectbureaucredithistoryobtained_co
    
) 
-- SECTION 2 -> UNION of prepared CTE's in Section 1
, union_all_events AS (
    SELECT 
    application_id,client_id,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_balance,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_closedAccounts,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_creditUtilizationRatio,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_initialApprovedAmount,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_installmentAmount,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_maximumDelinquency,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_openedAccounts,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_rating,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_score,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_totalClosedAccounts,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_totalOpenedAccounts,commercial_commercialSummaryExperian_summary_balance_delinquent30Balance,commercial_commercialSummaryExperian_summary_balance_delinquent60Balance,commercial_commercialSummaryExperian_summary_balance_delinquent90Balance,commercial_commercialSummaryExperian_summary_balance_delinquentBalance,commercial_commercialSummaryExperian_summary_balance_higherBalance,commercial_commercialSummaryExperian_summary_balance_installmentAmount,commercial_commercialSummaryExperian_summary_balance_totalBalance,commercial_commercialSummaryExperian_summary_principal_claims,commercial_commercialSummaryExperian_summary_principal_closedAccounts,commercial_commercialSummaryExperian_summary_principal_closedAccountsAHOCCB,commercial_commercialSummaryExperian_summary_principal_customerSince,commercial_commercialSummaryExperian_summary_principal_disagreementsToDate,commercial_commercialSummaryExperian_summary_principal_lastSixMonthsQueries,commercial_commercialSummaryExperian_summary_principal_negativeHistoryLastTwelveMonths,commercial_commercialSummaryExperian_summary_principal_negativeOpenAccounts,commercial_commercialSummaryExperian_summary_principal_openAccounts,commercial_commercialSummaryExperian_summary_principal_openAccountsAHOCCB,commercial_incomeEstimator_averageSMLV,commercial_incomeEstimator_creditCardBalance,commercial_incomeEstimator_creditCardInitialApprovedAmount,commercial_incomeEstimator_creditCardInstallment,commercial_incomeEstimator_estimatedIncome,commercial_incomeEstimator_indebtednessCapacity,commercial_incomeEstimator_maximum,commercial_incomeEstimator_maximumSMLV,commercial_incomeEstimator_minimum,commercial_incomeEstimator_minimumSMLV,commercial_incomeEstimator_nonRevolvingTotalBalance,commercial_incomeEstimator_nonRevolvingTotalInitialApprovedAmount,commercial_incomeEstimator_nonRevolvingTotalInstallment,commercial_incomeEstimator_nonRevolvingTotalProducts,commercial_incomeEstimator_paymentCapacity,commercial_incomeEstimator_totalActiveCreditCards,commercial_incomeEstimator_totalActiveProducts,commercial_incomeEstimator_totalBalance,commercial_incomeEstimator_totalInitialApprovedAmount,commercial_incomeEstimator_totalInstallment,commercial_incomeValidator_healthEntity,commercial_incomeValidator_pensionFundName,commercial_indebtednessSummary_quarter1_date,commercial_indebtednessSummary_quarter1_numberOfEntities,commercial_indebtednessSummary_quarter1_numberOfPurchases,commercial_indebtednessSummary_quarter1_numberOfRefinanced,commercial_indebtednessSummary_quarter1_numberOfWriteOffs,commercial_indebtednessSummary_quarter2_date,commercial_indebtednessSummary_quarter2_numberOfEntities,commercial_indebtednessSummary_quarter2_numberOfPurchases,commercial_indebtednessSummary_quarter2_numberOfRefinanced,commercial_indebtednessSummary_quarter2_numberOfWriteOffs,commercial_indebtednessSummary_quarter3_date,commercial_indebtednessSummary_quarter3_numberOfEntities,commercial_indebtednessSummary_quarter3_numberOfPurchases,commercial_indebtednessSummary_quarter3_numberOfRefinanced,commercial_indebtednessSummary_quarter3_numberOfWriteOffs,commercial_provider,metadata_context_traceId,ocurred_on,event_name as last_event_name_processed,
    event_name,event_id as last_event_id_processed,
    event_id
    FROM union_bronze 
    UNION ALL
    SELECT 
    application_id,client_id,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_balance,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_closedAccounts,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_creditUtilizationRatio,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_initialApprovedAmount,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_installmentAmount,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_maximumDelinquency,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_openedAccounts,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_rating,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_score,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_totalClosedAccounts,commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_totalOpenedAccounts,commercial_commercialSummaryExperian_summary_balance_delinquent30Balance,commercial_commercialSummaryExperian_summary_balance_delinquent60Balance,commercial_commercialSummaryExperian_summary_balance_delinquent90Balance,commercial_commercialSummaryExperian_summary_balance_delinquentBalance,commercial_commercialSummaryExperian_summary_balance_higherBalance,commercial_commercialSummaryExperian_summary_balance_installmentAmount,commercial_commercialSummaryExperian_summary_balance_totalBalance,commercial_commercialSummaryExperian_summary_principal_claims,commercial_commercialSummaryExperian_summary_principal_closedAccounts,commercial_commercialSummaryExperian_summary_principal_closedAccountsAHOCCB,commercial_commercialSummaryExperian_summary_principal_customerSince,commercial_commercialSummaryExperian_summary_principal_disagreementsToDate,commercial_commercialSummaryExperian_summary_principal_lastSixMonthsQueries,commercial_commercialSummaryExperian_summary_principal_negativeHistoryLastTwelveMonths,commercial_commercialSummaryExperian_summary_principal_negativeOpenAccounts,commercial_commercialSummaryExperian_summary_principal_openAccounts,commercial_commercialSummaryExperian_summary_principal_openAccountsAHOCCB,commercial_incomeEstimator_averageSMLV,commercial_incomeEstimator_creditCardBalance,commercial_incomeEstimator_creditCardInitialApprovedAmount,commercial_incomeEstimator_creditCardInstallment,commercial_incomeEstimator_estimatedIncome,commercial_incomeEstimator_indebtednessCapacity,commercial_incomeEstimator_maximum,commercial_incomeEstimator_maximumSMLV,commercial_incomeEstimator_minimum,commercial_incomeEstimator_minimumSMLV,commercial_incomeEstimator_nonRevolvingTotalBalance,commercial_incomeEstimator_nonRevolvingTotalInitialApprovedAmount,commercial_incomeEstimator_nonRevolvingTotalInstallment,commercial_incomeEstimator_nonRevolvingTotalProducts,commercial_incomeEstimator_paymentCapacity,commercial_incomeEstimator_totalActiveCreditCards,commercial_incomeEstimator_totalActiveProducts,commercial_incomeEstimator_totalBalance,commercial_incomeEstimator_totalInitialApprovedAmount,commercial_incomeEstimator_totalInstallment,commercial_incomeValidator_healthEntity,commercial_incomeValidator_pensionFundName,commercial_indebtednessSummary_quarter1_date,commercial_indebtednessSummary_quarter1_numberOfEntities,commercial_indebtednessSummary_quarter1_numberOfPurchases,commercial_indebtednessSummary_quarter1_numberOfRefinanced,commercial_indebtednessSummary_quarter1_numberOfWriteOffs,commercial_indebtednessSummary_quarter2_date,commercial_indebtednessSummary_quarter2_numberOfEntities,commercial_indebtednessSummary_quarter2_numberOfPurchases,commercial_indebtednessSummary_quarter2_numberOfRefinanced,commercial_indebtednessSummary_quarter2_numberOfWriteOffs,commercial_indebtednessSummary_quarter3_date,commercial_indebtednessSummary_quarter3_numberOfEntities,commercial_indebtednessSummary_quarter3_numberOfPurchases,commercial_indebtednessSummary_quarter3_numberOfRefinanced,commercial_indebtednessSummary_quarter3_numberOfWriteOffs,commercial_provider,metadata_context_traceId,last_event_ocurred_on_processed as ocurred_on,last_event_name_processed,
    event_name,last_event_id_processed,
    event_id
    FROM silver.f_kyc_bureau_credit_history_co  
    WHERE 
    silver.f_kyc_bureau_credit_history_co.application_id IN (SELECT DISTINCT application_id FROM union_bronze)      
    
)   

-- SECTION 3 -> merge events by key and keep last not null data in each field
  , grouped_events AS (
  select
    application_id,
    element_at(array_sort(array_agg(CASE WHEN client_id is not null then struct(ocurred_on, client_id) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).client_id as client_id,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_balance is not null then struct(ocurred_on, commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_balance) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_balance as commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_balance,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_closedAccounts is not null then struct(ocurred_on, commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_closedAccounts) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_closedAccounts as commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_closedAccounts,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_creditUtilizationRatio is not null then struct(ocurred_on, commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_creditUtilizationRatio) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_creditUtilizationRatio as commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_creditUtilizationRatio,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_initialApprovedAmount is not null then struct(ocurred_on, commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_initialApprovedAmount) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_initialApprovedAmount as commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_initialApprovedAmount,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_installmentAmount is not null then struct(ocurred_on, commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_installmentAmount) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_installmentAmount as commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_installmentAmount,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_maximumDelinquency is not null then struct(ocurred_on, commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_maximumDelinquency) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_maximumDelinquency as commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_maximumDelinquency,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_openedAccounts is not null then struct(ocurred_on, commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_openedAccounts) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_openedAccounts as commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_openedAccounts,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_rating is not null then struct(ocurred_on, commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_rating) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_rating as commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_rating,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_score is not null then struct(ocurred_on, commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_score) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_score as commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_score,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_totalClosedAccounts is not null then struct(ocurred_on, commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_totalClosedAccounts) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_totalClosedAccounts as commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_totalClosedAccounts,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_totalOpenedAccounts is not null then struct(ocurred_on, commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_totalOpenedAccounts) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_totalOpenedAccounts as commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_totalOpenedAccounts,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_summary_balance_delinquent30Balance is not null then struct(ocurred_on, commercial_commercialSummaryExperian_summary_balance_delinquent30Balance) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_summary_balance_delinquent30Balance as commercial_commercialSummaryExperian_summary_balance_delinquent30Balance,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_summary_balance_delinquent60Balance is not null then struct(ocurred_on, commercial_commercialSummaryExperian_summary_balance_delinquent60Balance) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_summary_balance_delinquent60Balance as commercial_commercialSummaryExperian_summary_balance_delinquent60Balance,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_summary_balance_delinquent90Balance is not null then struct(ocurred_on, commercial_commercialSummaryExperian_summary_balance_delinquent90Balance) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_summary_balance_delinquent90Balance as commercial_commercialSummaryExperian_summary_balance_delinquent90Balance,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_summary_balance_delinquentBalance is not null then struct(ocurred_on, commercial_commercialSummaryExperian_summary_balance_delinquentBalance) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_summary_balance_delinquentBalance as commercial_commercialSummaryExperian_summary_balance_delinquentBalance,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_summary_balance_higherBalance is not null then struct(ocurred_on, commercial_commercialSummaryExperian_summary_balance_higherBalance) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_summary_balance_higherBalance as commercial_commercialSummaryExperian_summary_balance_higherBalance,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_summary_balance_installmentAmount is not null then struct(ocurred_on, commercial_commercialSummaryExperian_summary_balance_installmentAmount) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_summary_balance_installmentAmount as commercial_commercialSummaryExperian_summary_balance_installmentAmount,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_summary_balance_totalBalance is not null then struct(ocurred_on, commercial_commercialSummaryExperian_summary_balance_totalBalance) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_summary_balance_totalBalance as commercial_commercialSummaryExperian_summary_balance_totalBalance,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_summary_principal_claims is not null then struct(ocurred_on, commercial_commercialSummaryExperian_summary_principal_claims) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_summary_principal_claims as commercial_commercialSummaryExperian_summary_principal_claims,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_summary_principal_closedAccounts is not null then struct(ocurred_on, commercial_commercialSummaryExperian_summary_principal_closedAccounts) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_summary_principal_closedAccounts as commercial_commercialSummaryExperian_summary_principal_closedAccounts,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_summary_principal_closedAccountsAHOCCB is not null then struct(ocurred_on, commercial_commercialSummaryExperian_summary_principal_closedAccountsAHOCCB) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_summary_principal_closedAccountsAHOCCB as commercial_commercialSummaryExperian_summary_principal_closedAccountsAHOCCB,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_summary_principal_customerSince is not null then struct(ocurred_on, commercial_commercialSummaryExperian_summary_principal_customerSince) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_summary_principal_customerSince as commercial_commercialSummaryExperian_summary_principal_customerSince,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_summary_principal_disagreementsToDate is not null then struct(ocurred_on, commercial_commercialSummaryExperian_summary_principal_disagreementsToDate) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_summary_principal_disagreementsToDate as commercial_commercialSummaryExperian_summary_principal_disagreementsToDate,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_summary_principal_lastSixMonthsQueries is not null then struct(ocurred_on, commercial_commercialSummaryExperian_summary_principal_lastSixMonthsQueries) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_summary_principal_lastSixMonthsQueries as commercial_commercialSummaryExperian_summary_principal_lastSixMonthsQueries,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_summary_principal_negativeHistoryLastTwelveMonths is not null then struct(ocurred_on, commercial_commercialSummaryExperian_summary_principal_negativeHistoryLastTwelveMonths) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_summary_principal_negativeHistoryLastTwelveMonths as commercial_commercialSummaryExperian_summary_principal_negativeHistoryLastTwelveMonths,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_summary_principal_negativeOpenAccounts is not null then struct(ocurred_on, commercial_commercialSummaryExperian_summary_principal_negativeOpenAccounts) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_summary_principal_negativeOpenAccounts as commercial_commercialSummaryExperian_summary_principal_negativeOpenAccounts,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_summary_principal_openAccounts is not null then struct(ocurred_on, commercial_commercialSummaryExperian_summary_principal_openAccounts) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_summary_principal_openAccounts as commercial_commercialSummaryExperian_summary_principal_openAccounts,
    element_at(array_sort(array_agg(CASE WHEN commercial_commercialSummaryExperian_summary_principal_openAccountsAHOCCB is not null then struct(ocurred_on, commercial_commercialSummaryExperian_summary_principal_openAccountsAHOCCB) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_commercialSummaryExperian_summary_principal_openAccountsAHOCCB as commercial_commercialSummaryExperian_summary_principal_openAccountsAHOCCB,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeEstimator_averageSMLV is not null then struct(ocurred_on, commercial_incomeEstimator_averageSMLV) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeEstimator_averageSMLV as commercial_incomeEstimator_averageSMLV,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeEstimator_creditCardBalance is not null then struct(ocurred_on, commercial_incomeEstimator_creditCardBalance) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeEstimator_creditCardBalance as commercial_incomeEstimator_creditCardBalance,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeEstimator_creditCardInitialApprovedAmount is not null then struct(ocurred_on, commercial_incomeEstimator_creditCardInitialApprovedAmount) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeEstimator_creditCardInitialApprovedAmount as commercial_incomeEstimator_creditCardInitialApprovedAmount,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeEstimator_creditCardInstallment is not null then struct(ocurred_on, commercial_incomeEstimator_creditCardInstallment) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeEstimator_creditCardInstallment as commercial_incomeEstimator_creditCardInstallment,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeEstimator_estimatedIncome is not null then struct(ocurred_on, commercial_incomeEstimator_estimatedIncome) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeEstimator_estimatedIncome as commercial_incomeEstimator_estimatedIncome,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeEstimator_indebtednessCapacity is not null then struct(ocurred_on, commercial_incomeEstimator_indebtednessCapacity) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeEstimator_indebtednessCapacity as commercial_incomeEstimator_indebtednessCapacity,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeEstimator_maximum is not null then struct(ocurred_on, commercial_incomeEstimator_maximum) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeEstimator_maximum as commercial_incomeEstimator_maximum,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeEstimator_maximumSMLV is not null then struct(ocurred_on, commercial_incomeEstimator_maximumSMLV) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeEstimator_maximumSMLV as commercial_incomeEstimator_maximumSMLV,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeEstimator_minimum is not null then struct(ocurred_on, commercial_incomeEstimator_minimum) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeEstimator_minimum as commercial_incomeEstimator_minimum,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeEstimator_minimumSMLV is not null then struct(ocurred_on, commercial_incomeEstimator_minimumSMLV) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeEstimator_minimumSMLV as commercial_incomeEstimator_minimumSMLV,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeEstimator_nonRevolvingTotalBalance is not null then struct(ocurred_on, commercial_incomeEstimator_nonRevolvingTotalBalance) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeEstimator_nonRevolvingTotalBalance as commercial_incomeEstimator_nonRevolvingTotalBalance,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeEstimator_nonRevolvingTotalInitialApprovedAmount is not null then struct(ocurred_on, commercial_incomeEstimator_nonRevolvingTotalInitialApprovedAmount) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeEstimator_nonRevolvingTotalInitialApprovedAmount as commercial_incomeEstimator_nonRevolvingTotalInitialApprovedAmount,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeEstimator_nonRevolvingTotalInstallment is not null then struct(ocurred_on, commercial_incomeEstimator_nonRevolvingTotalInstallment) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeEstimator_nonRevolvingTotalInstallment as commercial_incomeEstimator_nonRevolvingTotalInstallment,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeEstimator_nonRevolvingTotalProducts is not null then struct(ocurred_on, commercial_incomeEstimator_nonRevolvingTotalProducts) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeEstimator_nonRevolvingTotalProducts as commercial_incomeEstimator_nonRevolvingTotalProducts,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeEstimator_paymentCapacity is not null then struct(ocurred_on, commercial_incomeEstimator_paymentCapacity) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeEstimator_paymentCapacity as commercial_incomeEstimator_paymentCapacity,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeEstimator_totalActiveCreditCards is not null then struct(ocurred_on, commercial_incomeEstimator_totalActiveCreditCards) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeEstimator_totalActiveCreditCards as commercial_incomeEstimator_totalActiveCreditCards,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeEstimator_totalActiveProducts is not null then struct(ocurred_on, commercial_incomeEstimator_totalActiveProducts) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeEstimator_totalActiveProducts as commercial_incomeEstimator_totalActiveProducts,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeEstimator_totalBalance is not null then struct(ocurred_on, commercial_incomeEstimator_totalBalance) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeEstimator_totalBalance as commercial_incomeEstimator_totalBalance,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeEstimator_totalInitialApprovedAmount is not null then struct(ocurred_on, commercial_incomeEstimator_totalInitialApprovedAmount) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeEstimator_totalInitialApprovedAmount as commercial_incomeEstimator_totalInitialApprovedAmount,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeEstimator_totalInstallment is not null then struct(ocurred_on, commercial_incomeEstimator_totalInstallment) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeEstimator_totalInstallment as commercial_incomeEstimator_totalInstallment,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeValidator_healthEntity is not null then struct(ocurred_on, commercial_incomeValidator_healthEntity) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeValidator_healthEntity as commercial_incomeValidator_healthEntity,
    element_at(array_sort(array_agg(CASE WHEN commercial_incomeValidator_pensionFundName is not null then struct(ocurred_on, commercial_incomeValidator_pensionFundName) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_incomeValidator_pensionFundName as commercial_incomeValidator_pensionFundName,
    element_at(array_sort(array_agg(CASE WHEN commercial_indebtednessSummary_quarter1_date is not null then struct(ocurred_on, commercial_indebtednessSummary_quarter1_date) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_indebtednessSummary_quarter1_date as commercial_indebtednessSummary_quarter1_date,
    element_at(array_sort(array_agg(CASE WHEN commercial_indebtednessSummary_quarter1_numberOfEntities is not null then struct(ocurred_on, commercial_indebtednessSummary_quarter1_numberOfEntities) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_indebtednessSummary_quarter1_numberOfEntities as commercial_indebtednessSummary_quarter1_numberOfEntities,
    element_at(array_sort(array_agg(CASE WHEN commercial_indebtednessSummary_quarter1_numberOfPurchases is not null then struct(ocurred_on, commercial_indebtednessSummary_quarter1_numberOfPurchases) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_indebtednessSummary_quarter1_numberOfPurchases as commercial_indebtednessSummary_quarter1_numberOfPurchases,
    element_at(array_sort(array_agg(CASE WHEN commercial_indebtednessSummary_quarter1_numberOfRefinanced is not null then struct(ocurred_on, commercial_indebtednessSummary_quarter1_numberOfRefinanced) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_indebtednessSummary_quarter1_numberOfRefinanced as commercial_indebtednessSummary_quarter1_numberOfRefinanced,
    element_at(array_sort(array_agg(CASE WHEN commercial_indebtednessSummary_quarter1_numberOfWriteOffs is not null then struct(ocurred_on, commercial_indebtednessSummary_quarter1_numberOfWriteOffs) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_indebtednessSummary_quarter1_numberOfWriteOffs as commercial_indebtednessSummary_quarter1_numberOfWriteOffs,
    element_at(array_sort(array_agg(CASE WHEN commercial_indebtednessSummary_quarter2_date is not null then struct(ocurred_on, commercial_indebtednessSummary_quarter2_date) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_indebtednessSummary_quarter2_date as commercial_indebtednessSummary_quarter2_date,
    element_at(array_sort(array_agg(CASE WHEN commercial_indebtednessSummary_quarter2_numberOfEntities is not null then struct(ocurred_on, commercial_indebtednessSummary_quarter2_numberOfEntities) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_indebtednessSummary_quarter2_numberOfEntities as commercial_indebtednessSummary_quarter2_numberOfEntities,
    element_at(array_sort(array_agg(CASE WHEN commercial_indebtednessSummary_quarter2_numberOfPurchases is not null then struct(ocurred_on, commercial_indebtednessSummary_quarter2_numberOfPurchases) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_indebtednessSummary_quarter2_numberOfPurchases as commercial_indebtednessSummary_quarter2_numberOfPurchases,
    element_at(array_sort(array_agg(CASE WHEN commercial_indebtednessSummary_quarter2_numberOfRefinanced is not null then struct(ocurred_on, commercial_indebtednessSummary_quarter2_numberOfRefinanced) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_indebtednessSummary_quarter2_numberOfRefinanced as commercial_indebtednessSummary_quarter2_numberOfRefinanced,
    element_at(array_sort(array_agg(CASE WHEN commercial_indebtednessSummary_quarter2_numberOfWriteOffs is not null then struct(ocurred_on, commercial_indebtednessSummary_quarter2_numberOfWriteOffs) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_indebtednessSummary_quarter2_numberOfWriteOffs as commercial_indebtednessSummary_quarter2_numberOfWriteOffs,
    element_at(array_sort(array_agg(CASE WHEN commercial_indebtednessSummary_quarter3_date is not null then struct(ocurred_on, commercial_indebtednessSummary_quarter3_date) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_indebtednessSummary_quarter3_date as commercial_indebtednessSummary_quarter3_date,
    element_at(array_sort(array_agg(CASE WHEN commercial_indebtednessSummary_quarter3_numberOfEntities is not null then struct(ocurred_on, commercial_indebtednessSummary_quarter3_numberOfEntities) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_indebtednessSummary_quarter3_numberOfEntities as commercial_indebtednessSummary_quarter3_numberOfEntities,
    element_at(array_sort(array_agg(CASE WHEN commercial_indebtednessSummary_quarter3_numberOfPurchases is not null then struct(ocurred_on, commercial_indebtednessSummary_quarter3_numberOfPurchases) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_indebtednessSummary_quarter3_numberOfPurchases as commercial_indebtednessSummary_quarter3_numberOfPurchases,
    element_at(array_sort(array_agg(CASE WHEN commercial_indebtednessSummary_quarter3_numberOfRefinanced is not null then struct(ocurred_on, commercial_indebtednessSummary_quarter3_numberOfRefinanced) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_indebtednessSummary_quarter3_numberOfRefinanced as commercial_indebtednessSummary_quarter3_numberOfRefinanced,
    element_at(array_sort(array_agg(CASE WHEN commercial_indebtednessSummary_quarter3_numberOfWriteOffs is not null then struct(ocurred_on, commercial_indebtednessSummary_quarter3_numberOfWriteOffs) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_indebtednessSummary_quarter3_numberOfWriteOffs as commercial_indebtednessSummary_quarter3_numberOfWriteOffs,
    element_at(array_sort(array_agg(CASE WHEN commercial_provider is not null then struct(ocurred_on, commercial_provider) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).commercial_provider as commercial_provider,
    element_at(array_sort(array_agg(CASE WHEN metadata_context_traceId is not null then struct(ocurred_on, metadata_context_traceId) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).metadata_context_traceId as metadata_context_traceId,
    element_at(array_sort(array_agg(CASE WHEN last_event_name_processed is not null then struct(ocurred_on, last_event_name_processed) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).last_event_name_processed as last_event_name_processed,
    element_at(array_sort(array_agg(CASE WHEN event_name is not null then struct(ocurred_on, event_name) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).event_name as event_name,
    element_at(array_sort(array_agg(CASE WHEN last_event_id_processed is not null then struct(ocurred_on, last_event_id_processed) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).last_event_id_processed as last_event_id_processed,
    element_at(array_sort(array_agg(CASE WHEN event_id is not null then struct(ocurred_on, event_id) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).event_id as event_id,
    max(ocurred_on) as last_event_ocurred_on_processed
  from union_all_events
  group by 
                    application_id
                       
           )


, final AS (
    SELECT 
        *,
        date(last_event_ocurred_on_processed ) as ocurred_on_date,
        to_timestamp('2022-01-01') updated_at
    FROM grouped_events 
)

select * from final;

/* DEBUGGING SECTION
is_incremental: True
this: silver.f_kyc_bureau_credit_history_co
country: co
silver_table_name: f_kyc_bureau_credit_history_co
table_pk_fields: ['application_id']
table_pk_amount: 1
fields_direct: ['application_id', 'client_id', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_balance', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_closedAccounts', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_creditUtilizationRatio', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_initialApprovedAmount', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_installmentAmount', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_maximumDelinquency', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_openedAccounts', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_rating', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_score', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_totalClosedAccounts', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_totalOpenedAccounts', 'commercial_commercialSummaryExperian_summary_balance_delinquent30Balance', 'commercial_commercialSummaryExperian_summary_balance_delinquent60Balance', 'commercial_commercialSummaryExperian_summary_balance_delinquent90Balance', 'commercial_commercialSummaryExperian_summary_balance_delinquentBalance', 'commercial_commercialSummaryExperian_summary_balance_higherBalance', 'commercial_commercialSummaryExperian_summary_balance_installmentAmount', 'commercial_commercialSummaryExperian_summary_balance_totalBalance', 'commercial_commercialSummaryExperian_summary_principal_claims', 'commercial_commercialSummaryExperian_summary_principal_closedAccounts', 'commercial_commercialSummaryExperian_summary_principal_closedAccountsAHOCCB', 'commercial_commercialSummaryExperian_summary_principal_customerSince', 'commercial_commercialSummaryExperian_summary_principal_disagreementsToDate', 'commercial_commercialSummaryExperian_summary_principal_lastSixMonthsQueries', 'commercial_commercialSummaryExperian_summary_principal_negativeHistoryLastTwelveMonths', 'commercial_commercialSummaryExperian_summary_principal_negativeOpenAccounts', 'commercial_commercialSummaryExperian_summary_principal_openAccounts', 'commercial_commercialSummaryExperian_summary_principal_openAccountsAHOCCB', 'commercial_incomeEstimator_averageSMLV', 'commercial_incomeEstimator_creditCardBalance', 'commercial_incomeEstimator_creditCardInitialApprovedAmount', 'commercial_incomeEstimator_creditCardInstallment', 'commercial_incomeEstimator_estimatedIncome', 'commercial_incomeEstimator_indebtednessCapacity', 'commercial_incomeEstimator_maximum', 'commercial_incomeEstimator_maximumSMLV', 'commercial_incomeEstimator_minimum', 'commercial_incomeEstimator_minimumSMLV', 'commercial_incomeEstimator_nonRevolvingTotalBalance', 'commercial_incomeEstimator_nonRevolvingTotalInitialApprovedAmount', 'commercial_incomeEstimator_nonRevolvingTotalInstallment', 'commercial_incomeEstimator_nonRevolvingTotalProducts', 'commercial_incomeEstimator_paymentCapacity', 'commercial_incomeEstimator_totalActiveCreditCards', 'commercial_incomeEstimator_totalActiveProducts', 'commercial_incomeEstimator_totalBalance', 'commercial_incomeEstimator_totalInitialApprovedAmount', 'commercial_incomeEstimator_totalInstallment', 'commercial_incomeValidator_healthEntity', 'commercial_incomeValidator_pensionFundName', 'commercial_indebtednessSummary_quarter1_date', 'commercial_indebtednessSummary_quarter1_numberOfEntities', 'commercial_indebtednessSummary_quarter1_numberOfPurchases', 'commercial_indebtednessSummary_quarter1_numberOfRefinanced', 'commercial_indebtednessSummary_quarter1_numberOfWriteOffs', 'commercial_indebtednessSummary_quarter2_date', 'commercial_indebtednessSummary_quarter2_numberOfEntities', 'commercial_indebtednessSummary_quarter2_numberOfPurchases', 'commercial_indebtednessSummary_quarter2_numberOfRefinanced', 'commercial_indebtednessSummary_quarter2_numberOfWriteOffs', 'commercial_indebtednessSummary_quarter3_date', 'commercial_indebtednessSummary_quarter3_numberOfEntities', 'commercial_indebtednessSummary_quarter3_numberOfPurchases', 'commercial_indebtednessSummary_quarter3_numberOfRefinanced', 'commercial_indebtednessSummary_quarter3_numberOfWriteOffs', 'commercial_provider', 'metadata_context_traceId', 'ocurred_on']
mandatory_fields: ['event_name', 'event_id']
events_dict: {'prospectbureaucredithistoryobtained': {'direct_attributes': ['application_id', 'client_id', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_balance', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_closedAccounts', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_creditUtilizationRatio', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_initialApprovedAmount', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_installmentAmount', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_maximumDelinquency', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_openedAccounts', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_rating', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_score', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_totalClosedAccounts', 'commercial_commercialSummaryExperian_balanceEvolution_averageAnalysis_totalOpenedAccounts', 'commercial_commercialSummaryExperian_summary_balance_delinquent30Balance', 'commercial_commercialSummaryExperian_summary_balance_delinquent60Balance', 'commercial_commercialSummaryExperian_summary_balance_delinquent90Balance', 'commercial_commercialSummaryExperian_summary_balance_delinquentBalance', 'commercial_commercialSummaryExperian_summary_balance_higherBalance', 'commercial_commercialSummaryExperian_summary_balance_installmentAmount', 'commercial_commercialSummaryExperian_summary_balance_totalBalance', 'commercial_commercialSummaryExperian_summary_principal_claims', 'commercial_commercialSummaryExperian_summary_principal_closedAccounts', 'commercial_commercialSummaryExperian_summary_principal_closedAccountsAHOCCB', 'commercial_commercialSummaryExperian_summary_principal_customerSince', 'commercial_commercialSummaryExperian_summary_principal_disagreementsToDate', 'commercial_commercialSummaryExperian_summary_principal_lastSixMonthsQueries', 'commercial_commercialSummaryExperian_summary_principal_negativeHistoryLastTwelveMonths', 'commercial_commercialSummaryExperian_summary_principal_negativeOpenAccounts', 'commercial_commercialSummaryExperian_summary_principal_openAccounts', 'commercial_commercialSummaryExperian_summary_principal_openAccountsAHOCCB', 'commercial_incomeEstimator_averageSMLV', 'commercial_incomeEstimator_creditCardBalance', 'commercial_incomeEstimator_creditCardInitialApprovedAmount', 'commercial_incomeEstimator_creditCardInstallment', 'commercial_incomeEstimator_estimatedIncome', 'commercial_incomeEstimator_indebtednessCapacity', 'commercial_incomeEstimator_maximum', 'commercial_incomeEstimator_maximumSMLV', 'commercial_incomeEstimator_minimum', 'commercial_incomeEstimator_minimumSMLV', 'commercial_incomeEstimator_nonRevolvingTotalBalance', 'commercial_incomeEstimator_nonRevolvingTotalInitialApprovedAmount', 'commercial_incomeEstimator_nonRevolvingTotalInstallment', 'commercial_incomeEstimator_nonRevolvingTotalProducts', 'commercial_incomeEstimator_paymentCapacity', 'commercial_incomeEstimator_totalActiveCreditCards', 'commercial_incomeEstimator_totalActiveProducts', 'commercial_incomeEstimator_totalBalance', 'commercial_incomeEstimator_totalInitialApprovedAmount', 'commercial_incomeEstimator_totalInstallment', 'commercial_incomeValidator_healthEntity', 'commercial_incomeValidator_pensionFundName', 'commercial_indebtednessSummary_quarter1_date', 'commercial_indebtednessSummary_quarter1_numberOfEntities', 'commercial_indebtednessSummary_quarter1_numberOfPurchases', 'commercial_indebtednessSummary_quarter1_numberOfRefinanced', 'commercial_indebtednessSummary_quarter1_numberOfWriteOffs', 'commercial_indebtednessSummary_quarter2_date', 'commercial_indebtednessSummary_quarter2_numberOfEntities', 'commercial_indebtednessSummary_quarter2_numberOfPurchases', 'commercial_indebtednessSummary_quarter2_numberOfRefinanced', 'commercial_indebtednessSummary_quarter2_numberOfWriteOffs', 'commercial_indebtednessSummary_quarter3_date', 'commercial_indebtednessSummary_quarter3_numberOfEntities', 'commercial_indebtednessSummary_quarter3_numberOfPurchases', 'commercial_indebtednessSummary_quarter3_numberOfRefinanced', 'commercial_indebtednessSummary_quarter3_numberOfWriteOffs', 'commercial_provider', 'metadata_context_traceId', 'ocurred_on'], 'custom_attributes': {}}}
events_keys: ['prospectbureaucredithistoryobtained']
flag_group_feature_active: True
version: silver_sql_builder_alternative
*/

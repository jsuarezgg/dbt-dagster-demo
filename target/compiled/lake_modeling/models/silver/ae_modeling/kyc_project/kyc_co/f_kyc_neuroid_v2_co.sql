
-- SILVER SQL

-- SECTION 1 -> CALLING BRONCE ref's
WITH
neuroidobtained_v2_co AS ( 
    SELECT *
    FROM bronze.neuroidobtained_v2_co
    WHERE ocurred_on_date BETWEEN (to_date('2022-01-01'- INTERVAL "10" HOUR)) AND to_date('2022-01-30') AND
        ocurred_on BETWEEN (to_timestamp('2022-01-01'- INTERVAL "10" HOUR)) AND to_timestamp('2022-01-30') 
)


--SECTION 1B -> UNION BRONCE ref's
, union_bronze AS (
    SELECT 
        application_id,client_id,metadata_context_traceId,neuroId_cellphoneCountryCode_autofill,neuroId_cellphoneCountryCode_dataImport,neuroId_cellphoneCountryCode_frictionIndex,neuroId_cellphoneCountryCode_hesitation,neuroId_cellphoneCountryCode_interactionTime,neuroId_cellphoneCountryCode_manipulation,neuroId_cellphoneCountryCode_repeatInteractions,neuroId_cellphoneCountryCode_timeToFirstAnswer,neuroId_cellphoneNumber_autofill,neuroId_cellphoneNumber_dataImport,neuroId_cellphoneNumber_frictionIndex,neuroId_cellphoneNumber_hesitation,neuroId_cellphoneNumber_interactionTime,neuroId_cellphoneNumber_manipulation,neuroId_cellphoneNumber_repeatInteractions,neuroId_cellphoneNumber_timeToFirstAnswer,neuroId_email_autofill,neuroId_email_dataImport,neuroId_email_frictionIndex,neuroId_email_hesitation,neuroId_email_interactionTime,neuroId_email_manipulation,neuroId_email_repeatInteractions,neuroId_email_timeToFirstAnswer,neuroId_lastName_autofill,neuroId_lastName_dataImport,neuroId_lastName_frictionIndex,neuroId_lastName_hesitation,neuroId_lastName_interactionTime,neuroId_lastName_manipulation,neuroId_lastName_repeatInteractions,neuroId_lastName_timeToFirstAnswer,neuroId_nationalExpeditionDateDay_autofill,neuroId_nationalExpeditionDateDay_dataImport,neuroId_nationalExpeditionDateDay_frictionIndex,neuroId_nationalExpeditionDateDay_hesitation,neuroId_nationalExpeditionDateDay_interactionTime,neuroId_nationalExpeditionDateDay_manipulation,neuroId_nationalExpeditionDateDay_repeatInteractions,neuroId_nationalExpeditionDateDay_timeToFirstAnswer,neuroId_nationalExpeditionDateMonth_autofill,neuroId_nationalExpeditionDateMonth_dataImport,neuroId_nationalExpeditionDateMonth_frictionIndex,neuroId_nationalExpeditionDateMonth_hesitation,neuroId_nationalExpeditionDateMonth_interactionTime,neuroId_nationalExpeditionDateMonth_manipulation,neuroId_nationalExpeditionDateMonth_repeatInteractions,neuroId_nationalExpeditionDateMonth_timeToFirstAnswer,neuroId_nationalExpeditionDateYear_autofill,neuroId_nationalExpeditionDateYear_dataImport,neuroId_nationalExpeditionDateYear_frictionIndex,neuroId_nationalExpeditionDateYear_hesitation,neuroId_nationalExpeditionDateYear_interactionTime,neuroId_nationalExpeditionDateYear_manipulation,neuroId_nationalExpeditionDateYear_repeatInteractions,neuroId_nationalExpeditionDateYear_timeToFirstAnswer,neuroId_nationalIdentificationNumber_autofill,neuroId_nationalIdentificationNumber_dataImport,neuroId_nationalIdentificationNumber_frictionIndex,neuroId_nationalIdentificationNumber_hesitation,neuroId_nationalIdentificationNumber_interactionTime,neuroId_nationalIdentificationNumber_manipulation,neuroId_nationalIdentificationNumber_repeatInteractions,neuroId_nationalIdentificationNumber_timeToFirstAnswer,neuroId_otpInput0_autofill,neuroId_otpInput0_dataImport,neuroId_otpInput0_frictionIndex,neuroId_otpInput0_hesitation,neuroId_otpInput0_interactionTime,neuroId_otpInput0_manipulation,neuroId_otpInput0_repeatInteractions,neuroId_otpInput0_timeToFirstAnswer,neuroId_otpInput1_autofill,neuroId_otpInput1_dataImport,neuroId_otpInput1_frictionIndex,neuroId_otpInput1_hesitation,neuroId_otpInput1_interactionTime,neuroId_otpInput1_manipulation,neuroId_otpInput1_repeatInteractions,neuroId_otpInput1_timeToFirstAnswer,neuroId_otpInput2_autofill,neuroId_otpInput2_dataImport,neuroId_otpInput2_frictionIndex,neuroId_otpInput2_hesitation,neuroId_otpInput2_interactionTime,neuroId_otpInput2_manipulation,neuroId_otpInput2_repeatInteractions,neuroId_otpInput2_timeToFirstAnswer,neuroId_otpInput3_autofill,neuroId_otpInput3_dataImport,neuroId_otpInput3_frictionIndex,neuroId_otpInput3_hesitation,neuroId_otpInput3_interactionTime,neuroId_otpInput3_manipulation,neuroId_otpInput3_repeatInteractions,neuroId_otpInput3_timeToFirstAnswer,neuroId_otpInput4_autofill,neuroId_otpInput4_dataImport,neuroId_otpInput4_frictionIndex,neuroId_otpInput4_hesitation,neuroId_otpInput4_interactionTime,neuroId_otpInput4_manipulation,neuroId_otpInput4_repeatInteractions,neuroId_otpInput4_timeToFirstAnswer,neuroId_otpInput5_autofill,neuroId_otpInput5_dataImport,neuroId_otpInput5_frictionIndex,neuroId_otpInput5_hesitation,neuroId_otpInput5_interactionTime,neuroId_otpInput5_manipulation,neuroId_otpInput5_repeatInteractions,neuroId_otpInput5_timeToFirstAnswer,neuroId_sessionBreaks,neuroId_totalSessionIdleTime,neuroId_totalSessionInteractionTime,ocurred_on,event_name as last_event_name_processed,
    event_name,event_id as last_event_id_processed,
    event_id
    FROM neuroidobtained_v2_co
    
) 
-- SECTION 2 -> UNION of prepared CTE's in Section 1
, union_all_events AS (
    SELECT 
    application_id,client_id,metadata_context_traceId,neuroId_cellphoneCountryCode_autofill,neuroId_cellphoneCountryCode_dataImport,neuroId_cellphoneCountryCode_frictionIndex,neuroId_cellphoneCountryCode_hesitation,neuroId_cellphoneCountryCode_interactionTime,neuroId_cellphoneCountryCode_manipulation,neuroId_cellphoneCountryCode_repeatInteractions,neuroId_cellphoneCountryCode_timeToFirstAnswer,neuroId_cellphoneNumber_autofill,neuroId_cellphoneNumber_dataImport,neuroId_cellphoneNumber_frictionIndex,neuroId_cellphoneNumber_hesitation,neuroId_cellphoneNumber_interactionTime,neuroId_cellphoneNumber_manipulation,neuroId_cellphoneNumber_repeatInteractions,neuroId_cellphoneNumber_timeToFirstAnswer,neuroId_email_autofill,neuroId_email_dataImport,neuroId_email_frictionIndex,neuroId_email_hesitation,neuroId_email_interactionTime,neuroId_email_manipulation,neuroId_email_repeatInteractions,neuroId_email_timeToFirstAnswer,neuroId_lastName_autofill,neuroId_lastName_dataImport,neuroId_lastName_frictionIndex,neuroId_lastName_hesitation,neuroId_lastName_interactionTime,neuroId_lastName_manipulation,neuroId_lastName_repeatInteractions,neuroId_lastName_timeToFirstAnswer,neuroId_nationalExpeditionDateDay_autofill,neuroId_nationalExpeditionDateDay_dataImport,neuroId_nationalExpeditionDateDay_frictionIndex,neuroId_nationalExpeditionDateDay_hesitation,neuroId_nationalExpeditionDateDay_interactionTime,neuroId_nationalExpeditionDateDay_manipulation,neuroId_nationalExpeditionDateDay_repeatInteractions,neuroId_nationalExpeditionDateDay_timeToFirstAnswer,neuroId_nationalExpeditionDateMonth_autofill,neuroId_nationalExpeditionDateMonth_dataImport,neuroId_nationalExpeditionDateMonth_frictionIndex,neuroId_nationalExpeditionDateMonth_hesitation,neuroId_nationalExpeditionDateMonth_interactionTime,neuroId_nationalExpeditionDateMonth_manipulation,neuroId_nationalExpeditionDateMonth_repeatInteractions,neuroId_nationalExpeditionDateMonth_timeToFirstAnswer,neuroId_nationalExpeditionDateYear_autofill,neuroId_nationalExpeditionDateYear_dataImport,neuroId_nationalExpeditionDateYear_frictionIndex,neuroId_nationalExpeditionDateYear_hesitation,neuroId_nationalExpeditionDateYear_interactionTime,neuroId_nationalExpeditionDateYear_manipulation,neuroId_nationalExpeditionDateYear_repeatInteractions,neuroId_nationalExpeditionDateYear_timeToFirstAnswer,neuroId_nationalIdentificationNumber_autofill,neuroId_nationalIdentificationNumber_dataImport,neuroId_nationalIdentificationNumber_frictionIndex,neuroId_nationalIdentificationNumber_hesitation,neuroId_nationalIdentificationNumber_interactionTime,neuroId_nationalIdentificationNumber_manipulation,neuroId_nationalIdentificationNumber_repeatInteractions,neuroId_nationalIdentificationNumber_timeToFirstAnswer,neuroId_otpInput0_autofill,neuroId_otpInput0_dataImport,neuroId_otpInput0_frictionIndex,neuroId_otpInput0_hesitation,neuroId_otpInput0_interactionTime,neuroId_otpInput0_manipulation,neuroId_otpInput0_repeatInteractions,neuroId_otpInput0_timeToFirstAnswer,neuroId_otpInput1_autofill,neuroId_otpInput1_dataImport,neuroId_otpInput1_frictionIndex,neuroId_otpInput1_hesitation,neuroId_otpInput1_interactionTime,neuroId_otpInput1_manipulation,neuroId_otpInput1_repeatInteractions,neuroId_otpInput1_timeToFirstAnswer,neuroId_otpInput2_autofill,neuroId_otpInput2_dataImport,neuroId_otpInput2_frictionIndex,neuroId_otpInput2_hesitation,neuroId_otpInput2_interactionTime,neuroId_otpInput2_manipulation,neuroId_otpInput2_repeatInteractions,neuroId_otpInput2_timeToFirstAnswer,neuroId_otpInput3_autofill,neuroId_otpInput3_dataImport,neuroId_otpInput3_frictionIndex,neuroId_otpInput3_hesitation,neuroId_otpInput3_interactionTime,neuroId_otpInput3_manipulation,neuroId_otpInput3_repeatInteractions,neuroId_otpInput3_timeToFirstAnswer,neuroId_otpInput4_autofill,neuroId_otpInput4_dataImport,neuroId_otpInput4_frictionIndex,neuroId_otpInput4_hesitation,neuroId_otpInput4_interactionTime,neuroId_otpInput4_manipulation,neuroId_otpInput4_repeatInteractions,neuroId_otpInput4_timeToFirstAnswer,neuroId_otpInput5_autofill,neuroId_otpInput5_dataImport,neuroId_otpInput5_frictionIndex,neuroId_otpInput5_hesitation,neuroId_otpInput5_interactionTime,neuroId_otpInput5_manipulation,neuroId_otpInput5_repeatInteractions,neuroId_otpInput5_timeToFirstAnswer,neuroId_sessionBreaks,neuroId_totalSessionIdleTime,neuroId_totalSessionInteractionTime,ocurred_on,event_name as last_event_name_processed,
    event_name,event_id as last_event_id_processed,
    event_id
    FROM union_bronze 
    UNION ALL
    SELECT 
    application_id,client_id,metadata_context_traceId,neuroId_cellphoneCountryCode_autofill,neuroId_cellphoneCountryCode_dataImport,neuroId_cellphoneCountryCode_frictionIndex,neuroId_cellphoneCountryCode_hesitation,neuroId_cellphoneCountryCode_interactionTime,neuroId_cellphoneCountryCode_manipulation,neuroId_cellphoneCountryCode_repeatInteractions,neuroId_cellphoneCountryCode_timeToFirstAnswer,neuroId_cellphoneNumber_autofill,neuroId_cellphoneNumber_dataImport,neuroId_cellphoneNumber_frictionIndex,neuroId_cellphoneNumber_hesitation,neuroId_cellphoneNumber_interactionTime,neuroId_cellphoneNumber_manipulation,neuroId_cellphoneNumber_repeatInteractions,neuroId_cellphoneNumber_timeToFirstAnswer,neuroId_email_autofill,neuroId_email_dataImport,neuroId_email_frictionIndex,neuroId_email_hesitation,neuroId_email_interactionTime,neuroId_email_manipulation,neuroId_email_repeatInteractions,neuroId_email_timeToFirstAnswer,neuroId_lastName_autofill,neuroId_lastName_dataImport,neuroId_lastName_frictionIndex,neuroId_lastName_hesitation,neuroId_lastName_interactionTime,neuroId_lastName_manipulation,neuroId_lastName_repeatInteractions,neuroId_lastName_timeToFirstAnswer,neuroId_nationalExpeditionDateDay_autofill,neuroId_nationalExpeditionDateDay_dataImport,neuroId_nationalExpeditionDateDay_frictionIndex,neuroId_nationalExpeditionDateDay_hesitation,neuroId_nationalExpeditionDateDay_interactionTime,neuroId_nationalExpeditionDateDay_manipulation,neuroId_nationalExpeditionDateDay_repeatInteractions,neuroId_nationalExpeditionDateDay_timeToFirstAnswer,neuroId_nationalExpeditionDateMonth_autofill,neuroId_nationalExpeditionDateMonth_dataImport,neuroId_nationalExpeditionDateMonth_frictionIndex,neuroId_nationalExpeditionDateMonth_hesitation,neuroId_nationalExpeditionDateMonth_interactionTime,neuroId_nationalExpeditionDateMonth_manipulation,neuroId_nationalExpeditionDateMonth_repeatInteractions,neuroId_nationalExpeditionDateMonth_timeToFirstAnswer,neuroId_nationalExpeditionDateYear_autofill,neuroId_nationalExpeditionDateYear_dataImport,neuroId_nationalExpeditionDateYear_frictionIndex,neuroId_nationalExpeditionDateYear_hesitation,neuroId_nationalExpeditionDateYear_interactionTime,neuroId_nationalExpeditionDateYear_manipulation,neuroId_nationalExpeditionDateYear_repeatInteractions,neuroId_nationalExpeditionDateYear_timeToFirstAnswer,neuroId_nationalIdentificationNumber_autofill,neuroId_nationalIdentificationNumber_dataImport,neuroId_nationalIdentificationNumber_frictionIndex,neuroId_nationalIdentificationNumber_hesitation,neuroId_nationalIdentificationNumber_interactionTime,neuroId_nationalIdentificationNumber_manipulation,neuroId_nationalIdentificationNumber_repeatInteractions,neuroId_nationalIdentificationNumber_timeToFirstAnswer,neuroId_otpInput0_autofill,neuroId_otpInput0_dataImport,neuroId_otpInput0_frictionIndex,neuroId_otpInput0_hesitation,neuroId_otpInput0_interactionTime,neuroId_otpInput0_manipulation,neuroId_otpInput0_repeatInteractions,neuroId_otpInput0_timeToFirstAnswer,neuroId_otpInput1_autofill,neuroId_otpInput1_dataImport,neuroId_otpInput1_frictionIndex,neuroId_otpInput1_hesitation,neuroId_otpInput1_interactionTime,neuroId_otpInput1_manipulation,neuroId_otpInput1_repeatInteractions,neuroId_otpInput1_timeToFirstAnswer,neuroId_otpInput2_autofill,neuroId_otpInput2_dataImport,neuroId_otpInput2_frictionIndex,neuroId_otpInput2_hesitation,neuroId_otpInput2_interactionTime,neuroId_otpInput2_manipulation,neuroId_otpInput2_repeatInteractions,neuroId_otpInput2_timeToFirstAnswer,neuroId_otpInput3_autofill,neuroId_otpInput3_dataImport,neuroId_otpInput3_frictionIndex,neuroId_otpInput3_hesitation,neuroId_otpInput3_interactionTime,neuroId_otpInput3_manipulation,neuroId_otpInput3_repeatInteractions,neuroId_otpInput3_timeToFirstAnswer,neuroId_otpInput4_autofill,neuroId_otpInput4_dataImport,neuroId_otpInput4_frictionIndex,neuroId_otpInput4_hesitation,neuroId_otpInput4_interactionTime,neuroId_otpInput4_manipulation,neuroId_otpInput4_repeatInteractions,neuroId_otpInput4_timeToFirstAnswer,neuroId_otpInput5_autofill,neuroId_otpInput5_dataImport,neuroId_otpInput5_frictionIndex,neuroId_otpInput5_hesitation,neuroId_otpInput5_interactionTime,neuroId_otpInput5_manipulation,neuroId_otpInput5_repeatInteractions,neuroId_otpInput5_timeToFirstAnswer,neuroId_sessionBreaks,neuroId_totalSessionIdleTime,neuroId_totalSessionInteractionTime,last_event_ocurred_on_processed as ocurred_on,last_event_name_processed,
    event_name,last_event_id_processed,
    event_id
    FROM silver.f_kyc_neuroid_v2_co  
    WHERE 
    silver.f_kyc_neuroid_v2_co.application_id IN (SELECT DISTINCT application_id FROM union_bronze)      
    
)   

-- SECTION 3 -> merge events by key and keep last not null data in each field
  , grouped_events AS (
  select
    application_id,
    element_at(array_sort(array_agg(CASE WHEN client_id is not null then struct(ocurred_on, client_id) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).client_id as client_id,
    element_at(array_sort(array_agg(CASE WHEN metadata_context_traceId is not null then struct(ocurred_on, metadata_context_traceId) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).metadata_context_traceId as metadata_context_traceId,
    element_at(array_sort(array_agg(CASE WHEN neuroId_cellphoneCountryCode_autofill is not null then struct(ocurred_on, neuroId_cellphoneCountryCode_autofill) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_cellphoneCountryCode_autofill as neuroId_cellphoneCountryCode_autofill,
    element_at(array_sort(array_agg(CASE WHEN neuroId_cellphoneCountryCode_dataImport is not null then struct(ocurred_on, neuroId_cellphoneCountryCode_dataImport) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_cellphoneCountryCode_dataImport as neuroId_cellphoneCountryCode_dataImport,
    element_at(array_sort(array_agg(CASE WHEN neuroId_cellphoneCountryCode_frictionIndex is not null then struct(ocurred_on, neuroId_cellphoneCountryCode_frictionIndex) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_cellphoneCountryCode_frictionIndex as neuroId_cellphoneCountryCode_frictionIndex,
    element_at(array_sort(array_agg(CASE WHEN neuroId_cellphoneCountryCode_hesitation is not null then struct(ocurred_on, neuroId_cellphoneCountryCode_hesitation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_cellphoneCountryCode_hesitation as neuroId_cellphoneCountryCode_hesitation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_cellphoneCountryCode_interactionTime is not null then struct(ocurred_on, neuroId_cellphoneCountryCode_interactionTime) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_cellphoneCountryCode_interactionTime as neuroId_cellphoneCountryCode_interactionTime,
    element_at(array_sort(array_agg(CASE WHEN neuroId_cellphoneCountryCode_manipulation is not null then struct(ocurred_on, neuroId_cellphoneCountryCode_manipulation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_cellphoneCountryCode_manipulation as neuroId_cellphoneCountryCode_manipulation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_cellphoneCountryCode_repeatInteractions is not null then struct(ocurred_on, neuroId_cellphoneCountryCode_repeatInteractions) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_cellphoneCountryCode_repeatInteractions as neuroId_cellphoneCountryCode_repeatInteractions,
    element_at(array_sort(array_agg(CASE WHEN neuroId_cellphoneCountryCode_timeToFirstAnswer is not null then struct(ocurred_on, neuroId_cellphoneCountryCode_timeToFirstAnswer) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_cellphoneCountryCode_timeToFirstAnswer as neuroId_cellphoneCountryCode_timeToFirstAnswer,
    element_at(array_sort(array_agg(CASE WHEN neuroId_cellphoneNumber_autofill is not null then struct(ocurred_on, neuroId_cellphoneNumber_autofill) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_cellphoneNumber_autofill as neuroId_cellphoneNumber_autofill,
    element_at(array_sort(array_agg(CASE WHEN neuroId_cellphoneNumber_dataImport is not null then struct(ocurred_on, neuroId_cellphoneNumber_dataImport) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_cellphoneNumber_dataImport as neuroId_cellphoneNumber_dataImport,
    element_at(array_sort(array_agg(CASE WHEN neuroId_cellphoneNumber_frictionIndex is not null then struct(ocurred_on, neuroId_cellphoneNumber_frictionIndex) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_cellphoneNumber_frictionIndex as neuroId_cellphoneNumber_frictionIndex,
    element_at(array_sort(array_agg(CASE WHEN neuroId_cellphoneNumber_hesitation is not null then struct(ocurred_on, neuroId_cellphoneNumber_hesitation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_cellphoneNumber_hesitation as neuroId_cellphoneNumber_hesitation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_cellphoneNumber_interactionTime is not null then struct(ocurred_on, neuroId_cellphoneNumber_interactionTime) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_cellphoneNumber_interactionTime as neuroId_cellphoneNumber_interactionTime,
    element_at(array_sort(array_agg(CASE WHEN neuroId_cellphoneNumber_manipulation is not null then struct(ocurred_on, neuroId_cellphoneNumber_manipulation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_cellphoneNumber_manipulation as neuroId_cellphoneNumber_manipulation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_cellphoneNumber_repeatInteractions is not null then struct(ocurred_on, neuroId_cellphoneNumber_repeatInteractions) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_cellphoneNumber_repeatInteractions as neuroId_cellphoneNumber_repeatInteractions,
    element_at(array_sort(array_agg(CASE WHEN neuroId_cellphoneNumber_timeToFirstAnswer is not null then struct(ocurred_on, neuroId_cellphoneNumber_timeToFirstAnswer) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_cellphoneNumber_timeToFirstAnswer as neuroId_cellphoneNumber_timeToFirstAnswer,
    element_at(array_sort(array_agg(CASE WHEN neuroId_email_autofill is not null then struct(ocurred_on, neuroId_email_autofill) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_email_autofill as neuroId_email_autofill,
    element_at(array_sort(array_agg(CASE WHEN neuroId_email_dataImport is not null then struct(ocurred_on, neuroId_email_dataImport) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_email_dataImport as neuroId_email_dataImport,
    element_at(array_sort(array_agg(CASE WHEN neuroId_email_frictionIndex is not null then struct(ocurred_on, neuroId_email_frictionIndex) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_email_frictionIndex as neuroId_email_frictionIndex,
    element_at(array_sort(array_agg(CASE WHEN neuroId_email_hesitation is not null then struct(ocurred_on, neuroId_email_hesitation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_email_hesitation as neuroId_email_hesitation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_email_interactionTime is not null then struct(ocurred_on, neuroId_email_interactionTime) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_email_interactionTime as neuroId_email_interactionTime,
    element_at(array_sort(array_agg(CASE WHEN neuroId_email_manipulation is not null then struct(ocurred_on, neuroId_email_manipulation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_email_manipulation as neuroId_email_manipulation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_email_repeatInteractions is not null then struct(ocurred_on, neuroId_email_repeatInteractions) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_email_repeatInteractions as neuroId_email_repeatInteractions,
    element_at(array_sort(array_agg(CASE WHEN neuroId_email_timeToFirstAnswer is not null then struct(ocurred_on, neuroId_email_timeToFirstAnswer) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_email_timeToFirstAnswer as neuroId_email_timeToFirstAnswer,
    element_at(array_sort(array_agg(CASE WHEN neuroId_lastName_autofill is not null then struct(ocurred_on, neuroId_lastName_autofill) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_lastName_autofill as neuroId_lastName_autofill,
    element_at(array_sort(array_agg(CASE WHEN neuroId_lastName_dataImport is not null then struct(ocurred_on, neuroId_lastName_dataImport) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_lastName_dataImport as neuroId_lastName_dataImport,
    element_at(array_sort(array_agg(CASE WHEN neuroId_lastName_frictionIndex is not null then struct(ocurred_on, neuroId_lastName_frictionIndex) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_lastName_frictionIndex as neuroId_lastName_frictionIndex,
    element_at(array_sort(array_agg(CASE WHEN neuroId_lastName_hesitation is not null then struct(ocurred_on, neuroId_lastName_hesitation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_lastName_hesitation as neuroId_lastName_hesitation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_lastName_interactionTime is not null then struct(ocurred_on, neuroId_lastName_interactionTime) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_lastName_interactionTime as neuroId_lastName_interactionTime,
    element_at(array_sort(array_agg(CASE WHEN neuroId_lastName_manipulation is not null then struct(ocurred_on, neuroId_lastName_manipulation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_lastName_manipulation as neuroId_lastName_manipulation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_lastName_repeatInteractions is not null then struct(ocurred_on, neuroId_lastName_repeatInteractions) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_lastName_repeatInteractions as neuroId_lastName_repeatInteractions,
    element_at(array_sort(array_agg(CASE WHEN neuroId_lastName_timeToFirstAnswer is not null then struct(ocurred_on, neuroId_lastName_timeToFirstAnswer) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_lastName_timeToFirstAnswer as neuroId_lastName_timeToFirstAnswer,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateDay_autofill is not null then struct(ocurred_on, neuroId_nationalExpeditionDateDay_autofill) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateDay_autofill as neuroId_nationalExpeditionDateDay_autofill,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateDay_dataImport is not null then struct(ocurred_on, neuroId_nationalExpeditionDateDay_dataImport) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateDay_dataImport as neuroId_nationalExpeditionDateDay_dataImport,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateDay_frictionIndex is not null then struct(ocurred_on, neuroId_nationalExpeditionDateDay_frictionIndex) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateDay_frictionIndex as neuroId_nationalExpeditionDateDay_frictionIndex,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateDay_hesitation is not null then struct(ocurred_on, neuroId_nationalExpeditionDateDay_hesitation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateDay_hesitation as neuroId_nationalExpeditionDateDay_hesitation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateDay_interactionTime is not null then struct(ocurred_on, neuroId_nationalExpeditionDateDay_interactionTime) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateDay_interactionTime as neuroId_nationalExpeditionDateDay_interactionTime,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateDay_manipulation is not null then struct(ocurred_on, neuroId_nationalExpeditionDateDay_manipulation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateDay_manipulation as neuroId_nationalExpeditionDateDay_manipulation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateDay_repeatInteractions is not null then struct(ocurred_on, neuroId_nationalExpeditionDateDay_repeatInteractions) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateDay_repeatInteractions as neuroId_nationalExpeditionDateDay_repeatInteractions,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateDay_timeToFirstAnswer is not null then struct(ocurred_on, neuroId_nationalExpeditionDateDay_timeToFirstAnswer) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateDay_timeToFirstAnswer as neuroId_nationalExpeditionDateDay_timeToFirstAnswer,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateMonth_autofill is not null then struct(ocurred_on, neuroId_nationalExpeditionDateMonth_autofill) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateMonth_autofill as neuroId_nationalExpeditionDateMonth_autofill,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateMonth_dataImport is not null then struct(ocurred_on, neuroId_nationalExpeditionDateMonth_dataImport) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateMonth_dataImport as neuroId_nationalExpeditionDateMonth_dataImport,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateMonth_frictionIndex is not null then struct(ocurred_on, neuroId_nationalExpeditionDateMonth_frictionIndex) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateMonth_frictionIndex as neuroId_nationalExpeditionDateMonth_frictionIndex,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateMonth_hesitation is not null then struct(ocurred_on, neuroId_nationalExpeditionDateMonth_hesitation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateMonth_hesitation as neuroId_nationalExpeditionDateMonth_hesitation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateMonth_interactionTime is not null then struct(ocurred_on, neuroId_nationalExpeditionDateMonth_interactionTime) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateMonth_interactionTime as neuroId_nationalExpeditionDateMonth_interactionTime,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateMonth_manipulation is not null then struct(ocurred_on, neuroId_nationalExpeditionDateMonth_manipulation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateMonth_manipulation as neuroId_nationalExpeditionDateMonth_manipulation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateMonth_repeatInteractions is not null then struct(ocurred_on, neuroId_nationalExpeditionDateMonth_repeatInteractions) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateMonth_repeatInteractions as neuroId_nationalExpeditionDateMonth_repeatInteractions,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateMonth_timeToFirstAnswer is not null then struct(ocurred_on, neuroId_nationalExpeditionDateMonth_timeToFirstAnswer) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateMonth_timeToFirstAnswer as neuroId_nationalExpeditionDateMonth_timeToFirstAnswer,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateYear_autofill is not null then struct(ocurred_on, neuroId_nationalExpeditionDateYear_autofill) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateYear_autofill as neuroId_nationalExpeditionDateYear_autofill,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateYear_dataImport is not null then struct(ocurred_on, neuroId_nationalExpeditionDateYear_dataImport) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateYear_dataImport as neuroId_nationalExpeditionDateYear_dataImport,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateYear_frictionIndex is not null then struct(ocurred_on, neuroId_nationalExpeditionDateYear_frictionIndex) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateYear_frictionIndex as neuroId_nationalExpeditionDateYear_frictionIndex,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateYear_hesitation is not null then struct(ocurred_on, neuroId_nationalExpeditionDateYear_hesitation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateYear_hesitation as neuroId_nationalExpeditionDateYear_hesitation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateYear_interactionTime is not null then struct(ocurred_on, neuroId_nationalExpeditionDateYear_interactionTime) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateYear_interactionTime as neuroId_nationalExpeditionDateYear_interactionTime,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateYear_manipulation is not null then struct(ocurred_on, neuroId_nationalExpeditionDateYear_manipulation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateYear_manipulation as neuroId_nationalExpeditionDateYear_manipulation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateYear_repeatInteractions is not null then struct(ocurred_on, neuroId_nationalExpeditionDateYear_repeatInteractions) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateYear_repeatInteractions as neuroId_nationalExpeditionDateYear_repeatInteractions,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalExpeditionDateYear_timeToFirstAnswer is not null then struct(ocurred_on, neuroId_nationalExpeditionDateYear_timeToFirstAnswer) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalExpeditionDateYear_timeToFirstAnswer as neuroId_nationalExpeditionDateYear_timeToFirstAnswer,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalIdentificationNumber_autofill is not null then struct(ocurred_on, neuroId_nationalIdentificationNumber_autofill) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalIdentificationNumber_autofill as neuroId_nationalIdentificationNumber_autofill,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalIdentificationNumber_dataImport is not null then struct(ocurred_on, neuroId_nationalIdentificationNumber_dataImport) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalIdentificationNumber_dataImport as neuroId_nationalIdentificationNumber_dataImport,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalIdentificationNumber_frictionIndex is not null then struct(ocurred_on, neuroId_nationalIdentificationNumber_frictionIndex) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalIdentificationNumber_frictionIndex as neuroId_nationalIdentificationNumber_frictionIndex,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalIdentificationNumber_hesitation is not null then struct(ocurred_on, neuroId_nationalIdentificationNumber_hesitation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalIdentificationNumber_hesitation as neuroId_nationalIdentificationNumber_hesitation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalIdentificationNumber_interactionTime is not null then struct(ocurred_on, neuroId_nationalIdentificationNumber_interactionTime) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalIdentificationNumber_interactionTime as neuroId_nationalIdentificationNumber_interactionTime,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalIdentificationNumber_manipulation is not null then struct(ocurred_on, neuroId_nationalIdentificationNumber_manipulation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalIdentificationNumber_manipulation as neuroId_nationalIdentificationNumber_manipulation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalIdentificationNumber_repeatInteractions is not null then struct(ocurred_on, neuroId_nationalIdentificationNumber_repeatInteractions) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalIdentificationNumber_repeatInteractions as neuroId_nationalIdentificationNumber_repeatInteractions,
    element_at(array_sort(array_agg(CASE WHEN neuroId_nationalIdentificationNumber_timeToFirstAnswer is not null then struct(ocurred_on, neuroId_nationalIdentificationNumber_timeToFirstAnswer) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_nationalIdentificationNumber_timeToFirstAnswer as neuroId_nationalIdentificationNumber_timeToFirstAnswer,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput0_autofill is not null then struct(ocurred_on, neuroId_otpInput0_autofill) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput0_autofill as neuroId_otpInput0_autofill,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput0_dataImport is not null then struct(ocurred_on, neuroId_otpInput0_dataImport) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput0_dataImport as neuroId_otpInput0_dataImport,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput0_frictionIndex is not null then struct(ocurred_on, neuroId_otpInput0_frictionIndex) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput0_frictionIndex as neuroId_otpInput0_frictionIndex,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput0_hesitation is not null then struct(ocurred_on, neuroId_otpInput0_hesitation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput0_hesitation as neuroId_otpInput0_hesitation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput0_interactionTime is not null then struct(ocurred_on, neuroId_otpInput0_interactionTime) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput0_interactionTime as neuroId_otpInput0_interactionTime,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput0_manipulation is not null then struct(ocurred_on, neuroId_otpInput0_manipulation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput0_manipulation as neuroId_otpInput0_manipulation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput0_repeatInteractions is not null then struct(ocurred_on, neuroId_otpInput0_repeatInteractions) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput0_repeatInteractions as neuroId_otpInput0_repeatInteractions,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput0_timeToFirstAnswer is not null then struct(ocurred_on, neuroId_otpInput0_timeToFirstAnswer) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput0_timeToFirstAnswer as neuroId_otpInput0_timeToFirstAnswer,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput1_autofill is not null then struct(ocurred_on, neuroId_otpInput1_autofill) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput1_autofill as neuroId_otpInput1_autofill,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput1_dataImport is not null then struct(ocurred_on, neuroId_otpInput1_dataImport) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput1_dataImport as neuroId_otpInput1_dataImport,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput1_frictionIndex is not null then struct(ocurred_on, neuroId_otpInput1_frictionIndex) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput1_frictionIndex as neuroId_otpInput1_frictionIndex,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput1_hesitation is not null then struct(ocurred_on, neuroId_otpInput1_hesitation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput1_hesitation as neuroId_otpInput1_hesitation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput1_interactionTime is not null then struct(ocurred_on, neuroId_otpInput1_interactionTime) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput1_interactionTime as neuroId_otpInput1_interactionTime,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput1_manipulation is not null then struct(ocurred_on, neuroId_otpInput1_manipulation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput1_manipulation as neuroId_otpInput1_manipulation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput1_repeatInteractions is not null then struct(ocurred_on, neuroId_otpInput1_repeatInteractions) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput1_repeatInteractions as neuroId_otpInput1_repeatInteractions,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput1_timeToFirstAnswer is not null then struct(ocurred_on, neuroId_otpInput1_timeToFirstAnswer) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput1_timeToFirstAnswer as neuroId_otpInput1_timeToFirstAnswer,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput2_autofill is not null then struct(ocurred_on, neuroId_otpInput2_autofill) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput2_autofill as neuroId_otpInput2_autofill,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput2_dataImport is not null then struct(ocurred_on, neuroId_otpInput2_dataImport) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput2_dataImport as neuroId_otpInput2_dataImport,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput2_frictionIndex is not null then struct(ocurred_on, neuroId_otpInput2_frictionIndex) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput2_frictionIndex as neuroId_otpInput2_frictionIndex,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput2_hesitation is not null then struct(ocurred_on, neuroId_otpInput2_hesitation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput2_hesitation as neuroId_otpInput2_hesitation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput2_interactionTime is not null then struct(ocurred_on, neuroId_otpInput2_interactionTime) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput2_interactionTime as neuroId_otpInput2_interactionTime,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput2_manipulation is not null then struct(ocurred_on, neuroId_otpInput2_manipulation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput2_manipulation as neuroId_otpInput2_manipulation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput2_repeatInteractions is not null then struct(ocurred_on, neuroId_otpInput2_repeatInteractions) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput2_repeatInteractions as neuroId_otpInput2_repeatInteractions,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput2_timeToFirstAnswer is not null then struct(ocurred_on, neuroId_otpInput2_timeToFirstAnswer) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput2_timeToFirstAnswer as neuroId_otpInput2_timeToFirstAnswer,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput3_autofill is not null then struct(ocurred_on, neuroId_otpInput3_autofill) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput3_autofill as neuroId_otpInput3_autofill,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput3_dataImport is not null then struct(ocurred_on, neuroId_otpInput3_dataImport) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput3_dataImport as neuroId_otpInput3_dataImport,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput3_frictionIndex is not null then struct(ocurred_on, neuroId_otpInput3_frictionIndex) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput3_frictionIndex as neuroId_otpInput3_frictionIndex,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput3_hesitation is not null then struct(ocurred_on, neuroId_otpInput3_hesitation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput3_hesitation as neuroId_otpInput3_hesitation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput3_interactionTime is not null then struct(ocurred_on, neuroId_otpInput3_interactionTime) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput3_interactionTime as neuroId_otpInput3_interactionTime,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput3_manipulation is not null then struct(ocurred_on, neuroId_otpInput3_manipulation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput3_manipulation as neuroId_otpInput3_manipulation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput3_repeatInteractions is not null then struct(ocurred_on, neuroId_otpInput3_repeatInteractions) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput3_repeatInteractions as neuroId_otpInput3_repeatInteractions,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput3_timeToFirstAnswer is not null then struct(ocurred_on, neuroId_otpInput3_timeToFirstAnswer) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput3_timeToFirstAnswer as neuroId_otpInput3_timeToFirstAnswer,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput4_autofill is not null then struct(ocurred_on, neuroId_otpInput4_autofill) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput4_autofill as neuroId_otpInput4_autofill,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput4_dataImport is not null then struct(ocurred_on, neuroId_otpInput4_dataImport) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput4_dataImport as neuroId_otpInput4_dataImport,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput4_frictionIndex is not null then struct(ocurred_on, neuroId_otpInput4_frictionIndex) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput4_frictionIndex as neuroId_otpInput4_frictionIndex,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput4_hesitation is not null then struct(ocurred_on, neuroId_otpInput4_hesitation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput4_hesitation as neuroId_otpInput4_hesitation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput4_interactionTime is not null then struct(ocurred_on, neuroId_otpInput4_interactionTime) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput4_interactionTime as neuroId_otpInput4_interactionTime,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput4_manipulation is not null then struct(ocurred_on, neuroId_otpInput4_manipulation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput4_manipulation as neuroId_otpInput4_manipulation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput4_repeatInteractions is not null then struct(ocurred_on, neuroId_otpInput4_repeatInteractions) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput4_repeatInteractions as neuroId_otpInput4_repeatInteractions,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput4_timeToFirstAnswer is not null then struct(ocurred_on, neuroId_otpInput4_timeToFirstAnswer) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput4_timeToFirstAnswer as neuroId_otpInput4_timeToFirstAnswer,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput5_autofill is not null then struct(ocurred_on, neuroId_otpInput5_autofill) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput5_autofill as neuroId_otpInput5_autofill,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput5_dataImport is not null then struct(ocurred_on, neuroId_otpInput5_dataImport) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput5_dataImport as neuroId_otpInput5_dataImport,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput5_frictionIndex is not null then struct(ocurred_on, neuroId_otpInput5_frictionIndex) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput5_frictionIndex as neuroId_otpInput5_frictionIndex,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput5_hesitation is not null then struct(ocurred_on, neuroId_otpInput5_hesitation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput5_hesitation as neuroId_otpInput5_hesitation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput5_interactionTime is not null then struct(ocurred_on, neuroId_otpInput5_interactionTime) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput5_interactionTime as neuroId_otpInput5_interactionTime,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput5_manipulation is not null then struct(ocurred_on, neuroId_otpInput5_manipulation) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput5_manipulation as neuroId_otpInput5_manipulation,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput5_repeatInteractions is not null then struct(ocurred_on, neuroId_otpInput5_repeatInteractions) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput5_repeatInteractions as neuroId_otpInput5_repeatInteractions,
    element_at(array_sort(array_agg(CASE WHEN neuroId_otpInput5_timeToFirstAnswer is not null then struct(ocurred_on, neuroId_otpInput5_timeToFirstAnswer) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_otpInput5_timeToFirstAnswer as neuroId_otpInput5_timeToFirstAnswer,
    element_at(array_sort(array_agg(CASE WHEN neuroId_sessionBreaks is not null then struct(ocurred_on, neuroId_sessionBreaks) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_sessionBreaks as neuroId_sessionBreaks,
    element_at(array_sort(array_agg(CASE WHEN neuroId_totalSessionIdleTime is not null then struct(ocurred_on, neuroId_totalSessionIdleTime) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_totalSessionIdleTime as neuroId_totalSessionIdleTime,
    element_at(array_sort(array_agg(CASE WHEN neuroId_totalSessionInteractionTime is not null then struct(ocurred_on, neuroId_totalSessionInteractionTime) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).neuroId_totalSessionInteractionTime as neuroId_totalSessionInteractionTime,
    element_at(array_sort(array_agg(CASE WHEN last_event_name_processed is not null then struct(ocurred_on, last_event_name_processed) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).last_event_name_processed as last_event_name_processed,
    element_at(array_sort(array_agg(CASE WHEN event_name is not null then struct(ocurred_on, event_name) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).event_name as event_name,
    element_at(array_sort(array_agg(CASE WHEN last_event_id_processed is not null then struct(ocurred_on, last_event_id_processed) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).last_event_id_processed as last_event_id_processed,
    element_at(array_sort(array_agg(CASE WHEN event_id is not null then struct(ocurred_on, event_id) else NULL end), (left, right) -> case when left.ocurred_on < right.ocurred_on then 1 when left.ocurred_on > right.ocurred_on then -1 when left.ocurred_on == right.ocurred_on then 0 end), 1).event_id as event_id,
    max(ocurred_on) as last_event_ocurred_on_processed
  from union_all_events
  group by 
                    application_id
                       
           )


, final AS (
    SELECT 
        *,
        date(last_event_ocurred_on_processed ) as ocurred_on_date,
        to_timestamp('2022-01-01') updated_at
    FROM grouped_events 
)

select * from final;

/* DEBUGGING SECTION
is_incremental: True
this: silver.f_kyc_neuroid_v2_co
country: co
silver_table_name: f_kyc_neuroid_v2_co
table_pk_fields: ['application_id']
table_pk_amount: 1
fields_direct: ['application_id', 'client_id', 'metadata_context_traceId', 'neuroId_cellphoneCountryCode_autofill', 'neuroId_cellphoneCountryCode_dataImport', 'neuroId_cellphoneCountryCode_frictionIndex', 'neuroId_cellphoneCountryCode_hesitation', 'neuroId_cellphoneCountryCode_interactionTime', 'neuroId_cellphoneCountryCode_manipulation', 'neuroId_cellphoneCountryCode_repeatInteractions', 'neuroId_cellphoneCountryCode_timeToFirstAnswer', 'neuroId_cellphoneNumber_autofill', 'neuroId_cellphoneNumber_dataImport', 'neuroId_cellphoneNumber_frictionIndex', 'neuroId_cellphoneNumber_hesitation', 'neuroId_cellphoneNumber_interactionTime', 'neuroId_cellphoneNumber_manipulation', 'neuroId_cellphoneNumber_repeatInteractions', 'neuroId_cellphoneNumber_timeToFirstAnswer', 'neuroId_email_autofill', 'neuroId_email_dataImport', 'neuroId_email_frictionIndex', 'neuroId_email_hesitation', 'neuroId_email_interactionTime', 'neuroId_email_manipulation', 'neuroId_email_repeatInteractions', 'neuroId_email_timeToFirstAnswer', 'neuroId_lastName_autofill', 'neuroId_lastName_dataImport', 'neuroId_lastName_frictionIndex', 'neuroId_lastName_hesitation', 'neuroId_lastName_interactionTime', 'neuroId_lastName_manipulation', 'neuroId_lastName_repeatInteractions', 'neuroId_lastName_timeToFirstAnswer', 'neuroId_nationalExpeditionDateDay_autofill', 'neuroId_nationalExpeditionDateDay_dataImport', 'neuroId_nationalExpeditionDateDay_frictionIndex', 'neuroId_nationalExpeditionDateDay_hesitation', 'neuroId_nationalExpeditionDateDay_interactionTime', 'neuroId_nationalExpeditionDateDay_manipulation', 'neuroId_nationalExpeditionDateDay_repeatInteractions', 'neuroId_nationalExpeditionDateDay_timeToFirstAnswer', 'neuroId_nationalExpeditionDateMonth_autofill', 'neuroId_nationalExpeditionDateMonth_dataImport', 'neuroId_nationalExpeditionDateMonth_frictionIndex', 'neuroId_nationalExpeditionDateMonth_hesitation', 'neuroId_nationalExpeditionDateMonth_interactionTime', 'neuroId_nationalExpeditionDateMonth_manipulation', 'neuroId_nationalExpeditionDateMonth_repeatInteractions', 'neuroId_nationalExpeditionDateMonth_timeToFirstAnswer', 'neuroId_nationalExpeditionDateYear_autofill', 'neuroId_nationalExpeditionDateYear_dataImport', 'neuroId_nationalExpeditionDateYear_frictionIndex', 'neuroId_nationalExpeditionDateYear_hesitation', 'neuroId_nationalExpeditionDateYear_interactionTime', 'neuroId_nationalExpeditionDateYear_manipulation', 'neuroId_nationalExpeditionDateYear_repeatInteractions', 'neuroId_nationalExpeditionDateYear_timeToFirstAnswer', 'neuroId_nationalIdentificationNumber_autofill', 'neuroId_nationalIdentificationNumber_dataImport', 'neuroId_nationalIdentificationNumber_frictionIndex', 'neuroId_nationalIdentificationNumber_hesitation', 'neuroId_nationalIdentificationNumber_interactionTime', 'neuroId_nationalIdentificationNumber_manipulation', 'neuroId_nationalIdentificationNumber_repeatInteractions', 'neuroId_nationalIdentificationNumber_timeToFirstAnswer', 'neuroId_otpInput0_autofill', 'neuroId_otpInput0_dataImport', 'neuroId_otpInput0_frictionIndex', 'neuroId_otpInput0_hesitation', 'neuroId_otpInput0_interactionTime', 'neuroId_otpInput0_manipulation', 'neuroId_otpInput0_repeatInteractions', 'neuroId_otpInput0_timeToFirstAnswer', 'neuroId_otpInput1_autofill', 'neuroId_otpInput1_dataImport', 'neuroId_otpInput1_frictionIndex', 'neuroId_otpInput1_hesitation', 'neuroId_otpInput1_interactionTime', 'neuroId_otpInput1_manipulation', 'neuroId_otpInput1_repeatInteractions', 'neuroId_otpInput1_timeToFirstAnswer', 'neuroId_otpInput2_autofill', 'neuroId_otpInput2_dataImport', 'neuroId_otpInput2_frictionIndex', 'neuroId_otpInput2_hesitation', 'neuroId_otpInput2_interactionTime', 'neuroId_otpInput2_manipulation', 'neuroId_otpInput2_repeatInteractions', 'neuroId_otpInput2_timeToFirstAnswer', 'neuroId_otpInput3_autofill', 'neuroId_otpInput3_dataImport', 'neuroId_otpInput3_frictionIndex', 'neuroId_otpInput3_hesitation', 'neuroId_otpInput3_interactionTime', 'neuroId_otpInput3_manipulation', 'neuroId_otpInput3_repeatInteractions', 'neuroId_otpInput3_timeToFirstAnswer', 'neuroId_otpInput4_autofill', 'neuroId_otpInput4_dataImport', 'neuroId_otpInput4_frictionIndex', 'neuroId_otpInput4_hesitation', 'neuroId_otpInput4_interactionTime', 'neuroId_otpInput4_manipulation', 'neuroId_otpInput4_repeatInteractions', 'neuroId_otpInput4_timeToFirstAnswer', 'neuroId_otpInput5_autofill', 'neuroId_otpInput5_dataImport', 'neuroId_otpInput5_frictionIndex', 'neuroId_otpInput5_hesitation', 'neuroId_otpInput5_interactionTime', 'neuroId_otpInput5_manipulation', 'neuroId_otpInput5_repeatInteractions', 'neuroId_otpInput5_timeToFirstAnswer', 'neuroId_sessionBreaks', 'neuroId_totalSessionIdleTime', 'neuroId_totalSessionInteractionTime', 'ocurred_on']
mandatory_fields: ['event_name', 'event_id']
events_dict: {'neuroidobtained_v2': {'direct_attributes': ['application_id', 'client_id', 'neuroId_cellphoneCountryCode_autofill', 'neuroId_cellphoneCountryCode_dataImport', 'neuroId_cellphoneCountryCode_frictionIndex', 'neuroId_cellphoneCountryCode_hesitation', 'neuroId_cellphoneCountryCode_interactionTime', 'neuroId_cellphoneCountryCode_manipulation', 'neuroId_cellphoneCountryCode_repeatInteractions', 'neuroId_cellphoneCountryCode_timeToFirstAnswer', 'neuroId_cellphoneNumber_autofill', 'neuroId_cellphoneNumber_dataImport', 'neuroId_cellphoneNumber_frictionIndex', 'neuroId_cellphoneNumber_hesitation', 'neuroId_cellphoneNumber_interactionTime', 'neuroId_cellphoneNumber_manipulation', 'neuroId_cellphoneNumber_repeatInteractions', 'neuroId_cellphoneNumber_timeToFirstAnswer', 'neuroId_email_autofill', 'neuroId_email_dataImport', 'neuroId_email_frictionIndex', 'neuroId_email_hesitation', 'neuroId_email_interactionTime', 'neuroId_email_manipulation', 'neuroId_email_repeatInteractions', 'neuroId_email_timeToFirstAnswer', 'neuroId_lastName_autofill', 'neuroId_lastName_dataImport', 'neuroId_lastName_frictionIndex', 'neuroId_lastName_hesitation', 'neuroId_lastName_interactionTime', 'neuroId_lastName_manipulation', 'neuroId_lastName_repeatInteractions', 'neuroId_lastName_timeToFirstAnswer', 'neuroId_nationalExpeditionDateDay_autofill', 'neuroId_nationalExpeditionDateDay_dataImport', 'neuroId_nationalExpeditionDateDay_frictionIndex', 'neuroId_nationalExpeditionDateDay_hesitation', 'neuroId_nationalExpeditionDateDay_interactionTime', 'neuroId_nationalExpeditionDateDay_manipulation', 'neuroId_nationalExpeditionDateDay_repeatInteractions', 'neuroId_nationalExpeditionDateDay_timeToFirstAnswer', 'neuroId_nationalExpeditionDateMonth_autofill', 'neuroId_nationalExpeditionDateMonth_dataImport', 'neuroId_nationalExpeditionDateMonth_frictionIndex', 'neuroId_nationalExpeditionDateMonth_hesitation', 'neuroId_nationalExpeditionDateMonth_interactionTime', 'neuroId_nationalExpeditionDateMonth_manipulation', 'neuroId_nationalExpeditionDateMonth_repeatInteractions', 'neuroId_nationalExpeditionDateMonth_timeToFirstAnswer', 'neuroId_nationalExpeditionDateYear_autofill', 'neuroId_nationalExpeditionDateYear_dataImport', 'neuroId_nationalExpeditionDateYear_frictionIndex', 'neuroId_nationalExpeditionDateYear_hesitation', 'neuroId_nationalExpeditionDateYear_interactionTime', 'neuroId_nationalExpeditionDateYear_manipulation', 'neuroId_nationalExpeditionDateYear_repeatInteractions', 'neuroId_nationalExpeditionDateYear_timeToFirstAnswer', 'neuroId_nationalIdentificationNumber_autofill', 'neuroId_nationalIdentificationNumber_dataImport', 'neuroId_nationalIdentificationNumber_frictionIndex', 'neuroId_nationalIdentificationNumber_hesitation', 'neuroId_nationalIdentificationNumber_interactionTime', 'neuroId_nationalIdentificationNumber_manipulation', 'neuroId_nationalIdentificationNumber_repeatInteractions', 'neuroId_nationalIdentificationNumber_timeToFirstAnswer', 'neuroId_otpInput0_autofill', 'neuroId_otpInput0_dataImport', 'neuroId_otpInput0_frictionIndex', 'neuroId_otpInput0_hesitation', 'neuroId_otpInput0_interactionTime', 'neuroId_otpInput0_manipulation', 'neuroId_otpInput0_repeatInteractions', 'neuroId_otpInput0_timeToFirstAnswer', 'neuroId_otpInput1_autofill', 'neuroId_otpInput1_dataImport', 'neuroId_otpInput1_frictionIndex', 'neuroId_otpInput1_hesitation', 'neuroId_otpInput1_interactionTime', 'neuroId_otpInput1_manipulation', 'neuroId_otpInput1_repeatInteractions', 'neuroId_otpInput1_timeToFirstAnswer', 'neuroId_otpInput2_autofill', 'neuroId_otpInput2_dataImport', 'neuroId_otpInput2_frictionIndex', 'neuroId_otpInput2_hesitation', 'neuroId_otpInput2_interactionTime', 'neuroId_otpInput2_manipulation', 'neuroId_otpInput2_repeatInteractions', 'neuroId_otpInput2_timeToFirstAnswer', 'neuroId_otpInput3_autofill', 'neuroId_otpInput3_dataImport', 'neuroId_otpInput3_frictionIndex', 'neuroId_otpInput3_hesitation', 'neuroId_otpInput3_interactionTime', 'neuroId_otpInput3_manipulation', 'neuroId_otpInput3_repeatInteractions', 'neuroId_otpInput3_timeToFirstAnswer', 'neuroId_otpInput4_autofill', 'neuroId_otpInput4_dataImport', 'neuroId_otpInput4_frictionIndex', 'neuroId_otpInput4_hesitation', 'neuroId_otpInput4_interactionTime', 'neuroId_otpInput4_manipulation', 'neuroId_otpInput4_repeatInteractions', 'neuroId_otpInput4_timeToFirstAnswer', 'neuroId_otpInput5_autofill', 'neuroId_otpInput5_dataImport', 'neuroId_otpInput5_frictionIndex', 'neuroId_otpInput5_hesitation', 'neuroId_otpInput5_interactionTime', 'neuroId_otpInput5_manipulation', 'neuroId_otpInput5_repeatInteractions', 'neuroId_otpInput5_timeToFirstAnswer', 'neuroId_sessionBreaks', 'neuroId_totalSessionIdleTime', 'neuroId_totalSessionInteractionTime', 'metadata_context_traceId', 'ocurred_on'], 'custom_attributes': {}}}
events_keys: ['neuroidobtained_v2']
flag_group_feature_active: True
version: silver_sql_builder_alternative
*/
